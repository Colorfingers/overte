<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//
//  Created by Zach Pomerantz on 2/16/2016.
//  Copyright 2016 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include DeferredBufferWrite.slh@>

<@include gpu/ShaderConstants.h@>
<@include gpu/Paint.slh@>

struct Grid {
    vec4 period;
    vec4 offset;
    vec4 edge;
};

UNIFORM_BUFFER(0, gridBuffer) {
  Grid grid; 
};

INPUT(GPU_ATTR_TEXCOORD0, vec2, varTexCoord0);
INPUT(GPU_ATTR_COLOR, vec4, varColor);
// unused, but needed for shader interface matching
INPUT(GPU_ATTR_POSITION, vec3, varPosition);
INPUT(GPU_ATTR_NORMAL, vec3, varNormal);


void main(void) {
    float alpha = mix(paintGridMajorMinor(varTexCoord0, grid.offset, grid.period, grid.edge),
                      paintGrid(varTexCoord0, grid.offset.xy, grid.period.xy, grid.edge.xy),
                      float(grid.edge.z == 0.0));

    if (alpha < 0.0001) {
        discard;
    }

    packDeferredFragmentUnlit(vec3(1.0, 0.0, 0.0), 1.0, varColor.xyz);
}
